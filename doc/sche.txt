*emacs-key-source.txt*	A schedule management plugin for neovim

Author: Cassin01
License: MIT license

CONTENTS						*sche-contents*

INTRODUCTION		|sche-introduction|
 PURPOSE		|sche-purpose|
INSTALL			|sche-install|
INTERFACE		|sche-interface|
 OPTIIONS		|sche-options|
 Functions		|sche-functions|
SYNTAX			|sche-syntax|
 MARKERS		|sche-markers|
 COMMENTOUT		|sche-commentout|
EXAMPLES		|sche-examples|
 GENERATECALENDAR	|generate-calander|

==============================================================================
INTRODUCTION						*sche-introduction*

*sche.nvim* is a text-based schedule management plugin for neovim.

*sche.nvim* is inspired by howm syntax.

If you don't want to configure plugins, you don't have to use the plugin.
It does not work with zero configuration.  You can use other plugins.

------------------------------------------------------------------------------
PURPOSE							*sche-purpose*

	- To allow scheduling with a small number of characters.
	(Aiming for a grammar with less typing than org mode or howm)

- To make it machine readable.
	To access g:_sche#data to see the schedule parsed into a json-like structure.

==============================================================================
INSTALL							*sche-install*

Note: sche.nvim requires Neovim (0.8.0+) (latest is
recommended).


	>
	-- packer.nvim
	use {
		'Cassin01/sche.nvim'
		requires = {"rcarriga/nvim-notify"}
		config = function()
			require('sche').setup(
				{
					sche_path = (vim.fn.expand '~/path/to/myschedule.sche')
				}
			)
		end
	}
	<


==============================================================================
INTERFACE						*sche-interface*


------------------------------------------------------------------------------
OPTIIONS						*sche-options*

The default optionis bellow

	>
	{:default_keymap true
	 :hl {:GCalendarMikan {:fg :#F4511E}
	      :GCalendarPeacock {:fg :#039BE5}
	      :GCalendarGraphite {:fg :#616161}
	      :GCalendarSage {:fg :#33B679}
	      :GCalendarBanana {:fg :#f6bf26}
	      :GCalendarLavender {:fg :#7986cb}
	      :GCalendarTomato {:fg :#d50000}
	      :GCalendarFlamingo {:fg :#e67c73}}
	 :notify {"@" (λ [annex] (.. "There is a chedule: " annex))
	          "#" (λ [annex] (.. "There is a memo: " annex) )
	          "+" (λ [annex] (.. "There is a todo: " annex) )
	          "-" (λ [annex] (.. "There is a remainder: " annex) )
	          "!" (λ [annex] (.. "There is a deadline: " annex) )
	          "." (λ [annex] (.. "You have completed: " annex) )}
	 :sche_path "none"
	 :syntax {:on true
	         :date {:vim_regex "\\d\\d\\d\\d/\\d\\d/\\d\\d"
	                :lua_regex "%d%d%d%d/%d%d/%d%d"
	                :vimstrftime "%Y/%m/%d"}
	         :month "'^\\(Febraury\\|March\\|April\\|May\\|June\\|July\\|August\\|September\\|October\\|November\\|December\\)'"
	         :weekday (weekday)
	         :sunday "'\\<Sun\\>'"
	         :saturday "'\\<Sat\\>'"}}
	<

------------------------------------------------------------------------------
FUNCTIONS 						*sche-functions*

							*sche.setup()*
sche.setup({opts})
	Setup function to be run by user. You must configure the path that there is your .sche file.

	Usage:
	>
		require('sche').setup{
			-- You mast configure sche_path.
			sche_path = 'path to sche'
		}
	<

							*sche.keysource.goto-today*
sche.keysource.goto-today()
	Goto todays line.


							*sche.keysource.goto-tomorrow*
sche.keysource.goto-tomorrow()
	Goto tomorrow line.

							*sche.keysource.select-mark*
sche.keysource.goto-tomorrow()
	Select markes.

==============================================================================

SYNTAX							*sche-syntax*


Usage
	>
	2022/06/25 Sat
	  @ 10:00-14:00 part time job at MacDonald
	  - My mothers birthday
	  ! 23:00 liner algebra homework
	<

------------------------------------------------------------------------------
MARKERS							*sche-markers*

@ schedule
- reminder
+ todo
! deadline
. done
# note

------------------------------------------------------------------------------
COMMENTOUT						*sche-commentout*

You can comment out by `;` like Lisp.

==============================================================================
EXAMPLES						*sche-examples*

If you are Japanese:

	>
	require('sche').setup({sche_path = vim.fn.expand("~/.config/nvim/data/10.sche"), 
	-- You can change month expressin like `1月`.
	syntax = {month = "'^\\(\\d\\|\\d\\d\\)\230\156\136'"}})
	<

------------------------------------------------------------------------------
GENERATECALENDAR					*generate-calander*

You can generate calander by run the bellow code.

	>
	// INFO: How to run
	// deno run date.ts
	
	import * as lodash from "https://deno.land/x/lodash@4.17.15-es/lodash.js"
	
	const now: Date = new Date();
	const weekday = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
	const formatDate = (date: Date): string => {
	    const str = `${
	        date.getFullYear()
	    }/${
	        String(date.getMonth()+1).padStart(2, '0')
	    }/${
	        String(date.getDate()).padStart(2, '0')
	    } ${
	        weekday[date.getDay()]
	    }`;
	    return str
	}
	
	const addDays = (date: Date, days: number): Date => {
	    date.setDate(date.getDate() + days);
	    return date;
	}
	
	const month = ["Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
	
	const genDates = (num: number): string[] => {
	    const dates: string[] = new Array();
	    for (const _ of Array(num).keys()) {
	        const date = addDays(now, 1);
	        const str = formatDate(date);
	        dates.push(str);
	
	        const nextDayMonth = addDays(lodash.cloneDeep(date), 1).getMonth();
	        console.log(date.getMonth(), nextDayMonth)
	        if (date.getMonth() != nextDayMonth) {
	            dates.push("")
	            dates.push(month[nextDayMonth]) //or  dates.push(String(nextDayMonth + 1) + "月")

	            dates.push("")
	        }
	    }
	    return dates;
	}
	
	const main = async() => {
	    const text = genDates(200).join("\n")
	    console.log(text)
	    Deno.writeTextFile("./my_calendar.sche", text);
	}
	
	main()
	<

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
